user root;
worker_processes auto;

events {
	worker_connections 2048;
}

stream {
	preread_buffer_size 16k;
	server {
		listen 30443 so_keepalive=on;
		tcp_nodelay on;
		error_log /usr/local/nginx-dpi/nginx/logs/error.log info;
		lua_socket_connect_timeout 2s;
		resolver 8.8.8.8;
		ssl_preread on;
		content_by_lua_block {
			-- config
			local proxy_addr = "127.0.0.1";
			local proxy_port = 1080;
			local isp_block_banner = "fz139.ttk.ru";
			local isp_common_name = "ttk.ru";
			local exclude_domains = {
				".ru",
				"igro.tech"
			}
			local force_domains = {
			}
			local connection_timeout = 2000;
			local read_timeout = 2000;
			local write_timeout = 2000;
			-- end of config

			local prefer_hosts = false;
			local prefer_socks_hosts = true;
			local host = nil;
			local cached_domains = ngx.shared.domains;
			local socket = ngx.req.socket(true);
			socket.socktype = "CLIENT";
			local god = require("resty.getorigdest");
			local dest = god.getorigdest(socket);
			local sni_name = ngx.var.ssl_preread_server_name;
			local openssl = require("resty.openssl");
			openssl.load_modules();
			local ngx_re = require("ngx.re");
			local cjson = require("cjson");
			local socks5 = require("resty.socks5");
			local struct = require("struct");
			local dests = ngx_re.split(dest, ":");
			local dest_addr = dests[1];
			local dest_port = tonumber(dests[2]);
			local connect_type_last = nil;

			local port_test = function(host, port)
				local ok = nil;
				local err = nil;
				local sock = ngx.socket.tcp();
				sock:settimeout(connection_timeout);
				ok, err = sock:connect(host, port);
				if (port == 443) then
					ok, err = sock:sslhandshake(false, host, false, false);
					if (err ~= nil) then
						sock:close()
						return nil, err;
					end
				end
				sock:close();
				return ok, err;
			end

			local socket_create_with_type = function(typename)
				local target = ngx.socket.tcp();
				target.socktype = typename;
				target:settimeouts(connection_timeout, read_timeout, write_timeout);
				return target;
			end

			local socket_connect_dest = function(target)
				local ok = nil;
				local err = nil;
				if (prefer_hosts == true and host ~= nil) then
					ok, err = target:connect(host, dest_port);
					connect_type_last = "host";
					if (err ~= nil) then
						local socktype = target.socktype;
						target = socket_create_with_type(socktype);
						ok, err = target:connect(dest_addr, dest_port);
						connect_type_last = "ip";
					end
				else
					ok, err = target:connect(dest_addr, dest_port);
					connect_type_last = "ip";
					if (err ~= nil and host ~= nil) then
						local socktype = target.socktype;
						target = socket_create_with_type(socktype);
						ok, err = target:connect(host, dest_port);
						connect_type_last = "host";
					end
				end
				if (ok == nil and err == nil) then
					err = "failure";
				end
				return target, err;
			end

			local intercept = false;
			local connected = false;
			local is_cached = false;
			local upstream = socket_create_with_type("UPSTREAM");
			local bufsize = 1024*16;
			local peek, err, partpeek = socket:receiveany(bufsize);
			local skip = false;

			if (peek == nil and partpeek ~= nil) then
				peek = partpeek;
			elseif (err ~= nil) then
				ngx.log(ngx.WARN, err);
			end

			if (sni_name ~= nil) then
                        	for i = 1, #exclude_domains do
                                	if (string.find(sni_name, exclude_domains[i])) then
                                        	intercept = false;
						skip = true;
                                        	break;
                                	end
                        	end

                        	for i = 1, #force_domains do
                                	if (string.find(sni_name, force_domains[i])) then
                                        	intercept = true;
						skip = true;
                                        	break;
                                	end
                        	end
			end

			if (dest_port == 80 and skip == false) then
				local http_host_find, err = ngx.re.match(peek, "[\\r\\n]{1,2}([hH][oO][sS][tT]:[ ]?){1}(?<host>[0-9A-Za-z\\-\\.]+)[\\r\\n]{1,2}");
				local http_host = nil;
				if (http_host_find ~= nil and http_host_find["host"] ~= false) then
					http_host = http_host_find["host"];
				end
				if (http_host ~= nil and host == nil) then
					host = http_host;
				end
				local ok = nil;
				local err = nil;
				ok, err = port_test(host, 80);
				if (err ~= nil) then
					intercept = true;
				end
				if (host == isp_block_banner and cached_domains ~= nil) then
					-- ngx.log(ngx.INFO, "retrieved cached interception info: intercept=" .. tostring(cached));
					intercept = cached_domains:get(host);
					is_cached = true;
				end
			elseif (dest_port == 443 and skip == false) then
				if (sni_name ~= nil and host == nil) then
					host = sni_name;
				end
				local ok = nil;
				local err = nil;
				ok, err = port_test(host, 443);
				-- ngx.log(ngx.DEBUG, "=== 443 === " .. tostring(ok));
				if (err ~= nil) then
					intercept = true;
					connected = true;
				end
			end

			if (connected == false and intercept == false) then
				local err = nil;
				upstream, err = socket_connect_dest(upstream);
				if (err ~= nil) then
					intercept = true;
					upstream = socket_create_with_type("UPSTREAM");
				end
			end

			if (is_cached == false and cached_domains ~= nil) then
				-- ngx.log(ngx.DEBUG, "Saving cached data: host=" .. host .. ", intercept=" .. tostring(intercept));
				cached_domains:set(host, intercept);
			end

			if (intercept == true) then
				local ok, err = upstream:connect(proxy_addr, proxy_port);
				-- ngx.log(ngx.DEBUG, err);
				ok, err = socks5.auth(upstream);
				-- ngx.log(ngx.DEBUG, err);
				local ok = nil;
				local err = nil;
				if (prefer_socks_hosts == true and host ~= nil) then
					ok, err = socks5.connect(upstream, host, dest_port);
					connect_type_last = "socks_host";
					if (err ~= nil) then
						upstream = socket_create_with_type("UPSTREAM");
						upstream:connect(proxy_addr, proxy_port);
						ok, err = socks5.auth(upstream);
						ok, err = socks5.connect_ip(upstream, dest_ip, dest_port);
						connect_type_last = "socks_ip";
					end
				else
					ok, err = socks5.connect_ip(upstream, dest_addr, dest_port);
					connect_type_last = "socks_ip";
					if (err ~= nil and host ~= nil) then
						upstream = socket_create_with_type("UPSTREAM");
						upstream:connect(proxy_addr, proxy_port);
						ok, err = socks5.auth(upstream);
						ok, err = socks5.connect(upstream, host, dest_port);
						connect_type_last = "socks_host";
					end
				end
                		-- ngx.log(ngx.DEBUG, err);
            		end

			upstream:setoption("keepalive", true);
			upstream:setoption("tcp-nodelay", true);
			upstream:setoption("sndbuf", bufsize);
			upstream:setoption("rcvbuf", bufsize);
			-- ngx.log(ngx.INFO, "RESULT: "..tostring(host).."/"..dest_addr..":"..dest_port.." intercept:"..tostring(intercept).." connecttype:"..connect_type_last);
			local ok = false;

			if (peek ~= nil and peek:len() > 0) then
				ok, err = upstream:send(peek);
				if (err ~= nil) then
					ngx.log(ngx.WARN, err);
				end
			else
				ok = true;
			end

			local pipe = function(src, dst)
				while true do
					local data, err, partial = src:receiveany(bufsize);
					local errs = nil;
					local ok = false;
					if (data ~= nil) then
						ok, errs = dst:send(data)
					elseif (data == nil and partial ~= nil) then
						ok, errs = dst:send(partial)
					elseif (err == 'closed') then
						ngx.log(ngx.WARN, src.socktype..":"..err);
						return;
					elseif (err ~= nil and err ~= "timeout") then
						ngx.log(ngx.WARN, src.socktype..":"..err);
					end
					if (errs == 'closed') then
						ngx.log(ngx.WARN, dst.socktype..":"..errs);
						return;
					elseif (errs ~= nil) then
						ngx.log(ngx.WARN, dst.socktypeerr..":"..errs);
					end
				end
			end

			if (ok ~= false) then
				local co_updown = ngx.thread.spawn(pipe, upstream, socket);
				local co_downup = ngx.thread.spawn(pipe, socket, upstream);
				ngx.thread.wait(co_updown, co_downup);
			end

			upstream:close();
			ngx.flush(true);
			socket:shutdown("send");
		}
	}
}
