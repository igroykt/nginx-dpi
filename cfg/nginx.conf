user root;
worker_processes auto;

events {
	worker_connections 2048;
}

stream {
	preread_buffer_size 16k;
	lua_package_path "$prefix../cfg/?.lua;;";
	server {
		listen 30443 so_keepalive=on;
		tcp_nodelay on;
		error_log /usr/local/nginx-dpi/nginx/logs/error.log warn;
		lua_socket_connect_timeout 2s;
		lua_socket_log_errors off;
		resolver 8.8.8.8;
		ssl_preread on;
		content_by_lua_block {
			local config = require("config")
			local fakerequest = require("fakerequest")
			local porttest = require("porttest")
			local proxy_addr = config.proxy_addr
			local proxy_port = config.proxy_port
			local exclude_domains = config.exclude_domains
			local force_domains = config.force_domains
			local connection_timeout = config.connection_timeout
			local read_timeout = config.read_timeout
			local write_timeout = config.write_timeout
			local accel_youtube = config.accel_youtube
			local bypass_youtube = false
			local bufsize = 4096 * 64

			local prefer_hosts = false
			local prefer_socks_hosts = true
			local cached_domains = ngx.shared.domains
			local socket = ngx.req.socket(true)
			socket.socktype = "CLIENT"
			local god = require("resty.getorigdest")
			local dest = god.getorigdest(socket)
			local sni_name = ngx.var.ssl_preread_server_name
			local ngx_re = require("ngx.re")
			local socks5 = require("resty.socks5")
			local dests = ngx_re.split(dest, ":")
			local dest_addr = dests[1]
			local dest_port = tonumber(dests[2])
			local connect_type_last = nil

			local socket_create_with_type = function(typename)
				local target = ngx.socket.tcp()
				target.socktype = typename
				target:settimeouts(connection_timeout, read_timeout, write_timeout)
				return target
			end

			local intercept = false
			local connected = false
			local upstream = socket_create_with_type("UPSTREAM")
			local peek, err, partpeek = socket:receiveany(bufsize)

			if peek == nil and partpeek ~= nil then
				peek = partpeek
			elseif err ~= nil then
				ngx.log(ngx.WARN, err)
			end

			if sni_name ~= nil then
				for _, domain in ipairs(exclude_domains) do
					if string.find(sni_name, domain) then
						intercept = false
						break
					end
				end
				for _, domain in ipairs(force_domains) do
					if string.find(sni_name, domain) then
						intercept = true
						break
					end
				end
			end

			local youtube_domains = {
				".googlevideo.com",
				"i.ytimg.com"
			}

			if accel_youtube and sni_name ~= nil then
				for _, domain in ipairs(youtube_domains) do
					if string.find(sni_name, domain) then
						bypass_youtube = true
						break
					end
				end
			end

			local thread
			if bypass_youtube then
				thread = fakerequest.send_fake_data(sni_name or dest_addr, dest_port, connection_timeout)
			else
				thread = porttest.port_test(sni_name or dest_addr, dest_port, connection_timeout, read_timeout, write_timeout)
			end
			local ok, result, err = ngx.thread.wait(thread)
			if not ok or err then
				intercept = true
			end

			if intercept then
				local ok, err = upstream:connect(proxy_addr, proxy_port)
				if ok then
					ok, err = socks5.auth(upstream)
					if ok then
						ok, err = socks5.connect(upstream, sni_name or dest_addr, dest_port)
						if not ok then
							ngx.log(ngx.WARN, "SOCKS5 connect failed: ", err)
						end
					else
						ngx.log(ngx.WARN, "SOCKS5 auth failed: ", err)
					end
				else
					ngx.log(ngx.WARN, "Proxy connection failed: ", err)
				end
			else
				local ok, err = upstream:connect(dest_addr, dest_port)
				if not ok then
					ngx.log(ngx.WARN, "Direct connection failed: ", err)
				end
			end

			upstream:setoption("keepalive", true)
			upstream:setoption("tcp-nodelay", true)
			upstream:setoption("sndbuf", bufsize)
			upstream:setoption("rcvbuf", bufsize)

			if peek ~= nil and peek:len() > 0 then
				local ok, err = upstream:send(peek)
				if err ~= nil then
					ngx.log(ngx.WARN, err)
				end
			end

			local pipe = function(src, dst)
				while true do
					local data, err, partial = src:receiveany(bufsize)
					if data then
						local ok, send_err = dst:send(data)
						if not ok then
							ngx.log(ngx.WARN, "Send error: ", send_err)
							return
						end
					elseif partial then
						local ok, send_err = dst:send(partial)
						if not ok then
							ngx.log(ngx.WARN, "Partial send error: ", send_err)
							return
						end
					elseif err == 'closed' then
						return
					elseif err then
						ngx.log(ngx.WARN, "Receive error: ", err)
					end
				end
			end

			local co_updown = ngx.thread.spawn(pipe, upstream, socket)
			local co_downup = ngx.thread.spawn(pipe, socket, upstream)
			ngx.thread.wait(co_updown, co_downup)

			upstream:close()
			socket:shutdown("send")
		}
	}

	server {
		listen 30443 udp reuseport;
		error_log /usr/local/nginx-dpi/nginx/logs/error_udp.log warn;
		lua_socket_connect_timeout 2s;
		lua_socket_log_errors off;
		resolver 8.8.8.8;
		ssl_preread on;
		content_by_lua_block {
			local config = require("config")
			local fakerequest = require("fakerequest")
			local porttest = require("porttest")
			local proxy_addr = config.proxy_addr
			local proxy_port = config.proxy_port
			local exclude_domains = config.exclude_domains
			local force_domains = config.force_domains
			local connection_timeout = config.connection_timeout
			local read_timeout = config.read_timeout
			local write_timeout = config.write_timeout
			local accel_youtube = config.accel_youtube
			local bypass_youtube = false
			local bufsize = 4096 * 64

			local prefer_hosts = false;
			local prefer_socks_hosts = true;
			local cached_domains = ngx.shared.domains;
			local socket = ngx.req.socket(true);
			socket.socktype = "CLIENT";
			local god = require("resty.getorigdest");
			local dest = god.getorigdest(socket);
			local sni_name = ngx.var.ssl_preread_server_name;
			local ngx_re = require("ngx.re");
			local socks5 = require("resty.socks5");
			local dests = ngx_re.split(dest, ":");
			local dest_addr = dests[1];
			local dest_port = tonumber(dests[2]);
			local connect_type_last = nil;

			local socket_create_with_type = function(typename)
				local target = ngx.socket.tcp();
				target.socktype = typename;
				target:settimeouts(connection_timeout, read_timeout, write_timeout);
				return target;
			end

			local intercept = false;
			local connected = false;
			local upstream = socket_create_with_type("UPSTREAM");
			local peek, err, partpeek = socket:receiveany(bufsize);

			if peek == nil and partpeek ~= nil then
				peek = partpeek;
			elseif err ~= nil then
				ngx.log(ngx.WARN, err);
			end

			if sni_name ~= nil then
				for _, domain in ipairs(exclude_domains) do
					if string.find(sni_name, domain) then
						intercept = false;
						break;
					end
				end
				for _, domain in ipairs(force_domains) do
					if string.find(sni_name, domain) then
						intercept = true;
						break;
					end
				end
			end

			local youtube_domains = {
				".googlevideo.com",
				"i.ytimg.com"
			}

			if accel_youtube and sni_name ~= nil then
				for _, domain in ipairs(youtube_domains) do
					if string.find(sni_name, domain) then
						bypass_youtube = true
						break
					end
				end
			end

			local thread
			if bypass_youtube then
				thread = fakerequest.send_fake_data(sni_name or dest_addr, dest_port, connection_timeout)
			else
				thread = porttest.port_test_http3(sni_name or dest_addr, dest_port, connection_timeout, read_timeout, write_timeout)
			end
			local ok, result, err = ngx.thread.wait(thread)
			if not ok or err then
				intercept = true;
			end

			if intercept then
				local ok, err = upstream:connect(proxy_addr, proxy_port);
				if ok then
					ok, err = socks5.auth(upstream);
					if ok then
						ok, err = socks5.connect(upstream, sni_name or dest_addr, dest_port);
						if not ok then
							ngx.log(ngx.WARN, "SOCKS5 connect failed: ", err);
						end
					else
						ngx.log(ngx.WARN, "SOCKS5 auth failed: ", err);
					end
				else
					ngx.log(ngx.WARN, "Proxy connection failed: ", err);
				end
			else
				local ok, err = upstream:connect(dest_addr, dest_port);
				if not ok then
					ngx.log(ngx.WARN, "Direct connection failed: ", err);
				end
			end

			upstream:setoption("keepalive", true);
			upstream:setoption("tcp-nodelay", true);
			upstream:setoption("sndbuf", bufsize);
			upstream:setoption("rcvbuf", bufsize);

			if peek ~= nil and peek:len() > 0 then
				local ok, err = upstream:send(peek);
				if err ~= nil then
					ngx.log(ngx.WARN, err);
				end
			end

			local pipe = function(src, dst)
				while true do
					local data, err, partial = src:receiveany(bufsize);
					if data then
						local ok, send_err = dst:send(data);
						if not ok then
							ngx.log(ngx.WARN, "Send error: ", send_err);
							return;
						end
					elseif partial then
						local ok, send_err = dst:send(partial);
						if not ok then
							ngx.log(ngx.WARN, "Partial send error: ", send_err);
							return;
						end
					elseif err == 'closed' then
						return;
					elseif err then
						ngx.log(ngx.WARN, "Receive error: ", err);
					end
				end
			end

			local co_updown = ngx.thread.spawn(pipe, upstream, socket);
			local co_downup = ngx.thread.spawn(pipe, socket, upstream);
			ngx.thread.wait(co_updown, co_downup);

			upstream:close();
			socket:shutdown("send");
		}
	}
}
